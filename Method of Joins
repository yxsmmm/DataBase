https://zhuanlan.zhihu.com/p/46037197
在多表查询的时候如果是复制自己再和自己连接 称之为自连接
不同张表中连接查询分为内连接，交叉连接和外连接

内连接根据所使用的比较方式的不同又分为
等值连接，自然连接，和不等连接三种
连接的结果只列出这些表中与连接条件相匹配的数据行。

外连接不只列出与连接条件相匹配的行，而是列出左表，右表或两个表中所有符合搜索条件的数
LEFT JOIN, RIGHT JOIN, FULL OUTER JOIN

自连接
如果用的是关系型数据库，早期开发中估计这么干，现在估计用的都是图数据库。
我们建一张表 bus_sche，为了简单，表中只有上一站地点和下一站地点及唯一标识，然后插入一些模拟数据。

我就可以通过自连接查询上下站关系找到坐车线路

SELECT b.lastStation,b.nextStation,a.lastStation,a.nextStation 
FROM bus_sche a, bus_sche b 
WHERE b.nextStation = a.lastStation;
只在一张表中查询，表 bus_sche 使用了两个别名 bus_sche a, bus_sche b，因此相当于有两张表，
用 WHERE条件连接查询，「 实际只有一张表在自我连接查询」。
一句话，「 一张表，使用多个别名，表面上进行多表连接查询，这就是自连接查询」。

inner join的结果实际上是笛卡尔积
SELECT * from Table_A JOIN Table_B;
SELECT * from Table_A INNER JOIN Table_B;
内连接可以没有连接条件，没有条件之后的查询结果，会保留所有结果（笛卡尔集），与后面分享的交叉连接差不多。

等值连接

在连接条件中使用等于号（=）运算符比较被连接列的列值，其查询结果中列出被连接表中的所有列，包括其中的重复列。

SELECT * from Table_A A JOIN Table_B B ON A.id = B.id;
查询结果，注意列数是 4 列，两张表的字段直接拼接在一起，重复的字段在后面添加数字序列以做区分

不等连接是实用的运算符号不一样
SELECT * from Table_A A JOIN Table_B B On A.id < B.id;
根据On之后的条件一个个作比较，列出满足条件的所有结果

自然连接 
SELECT * FROM warehouse1 w NATURAL JOIN stock1 s WHERE s.w_id = w.w_id;
在连接条件中使用等号运算符比较被连接的列值，
但它使用选择列表指出查询结果集合中所包括的列
并删除连接表中的重复列 添加条件用WHERE而不是ON

在连接查询中，通常不用WHERE 而是用ON, 因为WHERE没有ON的效率高

交叉连接
交叉连接不带WHERE子句，

外连接
外连接不只列出与连接条件相匹配的行，而且还加上左表或右表或两个表中所有符合搜索条件的
数据行。

左连接
SELECT * from Table_A A LEFT JOIN Table_B B ON A.id
根据条件用右表匹配左表，不能匹配的其他表的字段都置空Null

Semi-join 
When the inner table is only used for filtering PostgreSQL can use a Semi-Join


Denormalization 
normalised Schema
A normalised schema requires to join tables on the equality of their primary and 
foreign keys. Joins can expensive.

Views
We can create views, but they are for convenience only, They do not change
the performance from that of the underlying normalised schema (the view definition
is used by the optimizer as would a subquery)

CREATE VIEW vall AS SELECT *
FROM warehouse w NATURAL JOIN stock s NATURAL JOIN item i;


Prepare 
When the prepare statement is executed, the specified query is parsed,
analyzed and rewritten. When an execute command is subsequently issued
the prepared query is planned and executed if a prepared statement is executed

Planner Method Configuration 
It is not recommended configure the optimizer by turning off some methods
https://www.postgresql.org/docs/13/runtime-config-query.html



Why are Queries Slow

Wrong design (See next lectures);
Poor configuration (increase work_mem);
Tuples are scattered, tables and indexes are bloated (VACUUM, CLUSTER,
VACUUM FULL, reindexing);
Missing indexes (CREATE INDEX);
PostgreSQL does not choose the best plan (ANALYZE);



In Conclusion

Understand the optimizer;
Tune the data (normalise, denormalise, index, create views, materialised) for
everyone;
Help the system maintain good statistics;
Hard-tune the queries as a last resort and at every users' current and future risk.

重点******************！！！！！！！！！！！！！！！！！！TODO
可能出现的问题
similar question with tutiral

run example show the execution plan

given 2 table shows the query do anti-join or nest-loop join 







